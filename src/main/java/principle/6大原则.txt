===
单一职责原则
如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力。
这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏（ASD）



===
开放-封闭原则
指的是：软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改。
也就是，对于扩展是开放的（open for extension），
对于更改是封闭的（Closed for modification）


===
依赖倒置原则
也就是要针对接口编程，不要对实现编程。
A：高层模块不应该依赖底层模块。两个都应该依赖抽象。
B：抽象不应该依赖细节，细节应该依赖于抽象


===
里氏替换原则
一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。
也就是说，在软件里面，把父类头替换成它的子类，程序的行为没有变化。简单地说，子类型必须能够替换掉它们的父类型。
需要注意***
只有当子类可以替换父类，软件单位的功能不受到影响时，父类才能真正的被服用，儿子类也能够在父类的基础上增加新的行为。

===
迪米特法则
如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，
可以通过第三者转发这个调用。

迪米特法则首先强调的前提是在类的结构设计上，每一个类都应当尽量降低成员的访问权限。
根本思想，是强调了类之间的松耦合。
