===== 设计原则 =====
1 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混合在一起
把变化的部分取出来“封装”之后，让其他部分不受影响，系统变得更有弹性

2 针对接口编程，而不是针对实现编程

3 多用组合，少用继承

4 为了交互对象之间的松耦合努力。松耦合的设计之所以能够让我们建立有弹性的OO系统，能够应付变化，是因为对象之间的互相依赖降到了最低

“模式病”：打印一个helloWorld也扯上模式

=== 第一章节 总结 ====
OO基础： 抽象、封装、继承、多态
OO原则：封装变化、多用组合；少用继承；针对接口编程，不针对实现编程
OO模式：策略模式-------定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

1. 良好的OO设计必须具备可复用、可扩充、可维护三个特性
2. 模式不是代码，而是针对设计问题的通用解决方案。应用它们到特定的应用中
3. 大多数的模式和原则，都是着眼于软件变化的主题
4. 我们常把系统中会变化的部分抽出来封装
5. 知道OO基础，并不足以让你设计出良好的OO系统



=== 第四章节 总结 ====
设计原则：依赖倒置原则（dependency inversion principle）
要依赖抽象，不要依赖具体类