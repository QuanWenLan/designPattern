不是所有的鸭子都可以飞，不是所有的鸭子都会叫。
当写一个基类 duck时，在其中定义了两个方法fly(), quack().各自的子类（导出类）继承这个类，默认有了飞行和叫方法
当子类有不同的叫或者飞行的方法时，重写这些基类的这两个方法。====》引发出了一个问题？

当有很多各种各样的鸭子(子类)的时候，各自的飞行和叫行为都不相同，这样的话就要编写代码（重写这些与基类不相同的行为）
这会浪费很多时间，到时候，如果要修改基类的方法的时候，有些子类没有重写方法，则会引发出很大的笑话。

========改进=======
1 飞行和叫这两个行为设计为两个接口


策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

《Java编程思想》P175: 创建一个能够根据所传递的参数对象的不同而具有不同行为的方法，被称为 策略设计模式。
这类方法包含所要执行的算法中固定不变的部分，而“策略”包含变化的部分。